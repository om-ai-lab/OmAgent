import pprint
import re  # noqa: F401

import six


class PromptTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_on': 'int',
        'description': 'str',
        'integrations': 'list[str]',
        'name': 'str',
        'tags': 'list[TagObject]',
        'template': 'str',
        'updated_by': 'str',
        'updated_on': 'int',
        'variables': 'list[str]'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'description': 'description',
        'integrations': 'integrations',
        'name': 'name',
        'tags': 'tags',
        'template': 'template',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'variables': 'variables'
    }

    def __init__(self, created_by=None, created_on=None, description=None, integrations=None, name=None, tags=None,
                 template=None, updated_by=None, updated_on=None, variables=None):  # noqa: E501
        """PromptTemplate - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_on = None
        self._description = None
        self._integrations = None
        self._name = None
        self._tags = None
        self._template = None
        self._updated_by = None
        self._updated_on = None
        self._variables = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if description is not None:
            self.description = description
        if integrations is not None:
            self.integrations = integrations
        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags
        if template is not None:
            self.template = template
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if variables is not None:
            self.variables = variables

    @property
    def created_by(self):
        """Gets the created_by of this PromptTemplate.  # noqa: E501


        :return: The created_by of this PromptTemplate.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PromptTemplate.


        :param created_by: The created_by of this PromptTemplate.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this PromptTemplate.  # noqa: E501


        :return: The created_on of this PromptTemplate.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this PromptTemplate.


        :param created_on: The created_on of this PromptTemplate.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this PromptTemplate.  # noqa: E501


        :return: The description of this PromptTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PromptTemplate.


        :param description: The description of this PromptTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def integrations(self):
        """Gets the integrations of this PromptTemplate.  # noqa: E501


        :return: The integrations of this PromptTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this PromptTemplate.


        :param integrations: The integrations of this PromptTemplate.  # noqa: E501
        :type: list[str]
        """

        self._integrations = integrations

    @property
    def name(self):
        """Gets the name of this PromptTemplate.  # noqa: E501


        :return: The name of this PromptTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PromptTemplate.


        :param name: The name of this PromptTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this PromptTemplate.  # noqa: E501


        :return: The tags of this PromptTemplate.  # noqa: E501
        :rtype: list[TagObject]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PromptTemplate.


        :param tags: The tags of this PromptTemplate.  # noqa: E501
        :type: list[TagObject]
        """

        self._tags = tags

    @property
    def template(self):
        """Gets the template of this PromptTemplate.  # noqa: E501


        :return: The template of this PromptTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this PromptTemplate.


        :param template: The template of this PromptTemplate.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def updated_by(self):
        """Gets the updated_by of this PromptTemplate.  # noqa: E501


        :return: The updated_by of this PromptTemplate.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PromptTemplate.


        :param updated_by: The updated_by of this PromptTemplate.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this PromptTemplate.  # noqa: E501


        :return: The updated_on of this PromptTemplate.  # noqa: E501
        :rtype: int
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this PromptTemplate.


        :param updated_on: The updated_on of this PromptTemplate.  # noqa: E501
        :type: int
        """

        self._updated_on = updated_on

    @property
    def variables(self):
        """Gets the variables of this PromptTemplate.  # noqa: E501


        :return: The variables of this PromptTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this PromptTemplate.


        :param variables: The variables of this PromptTemplate.  # noqa: E501
        :type: list[str]
        """

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromptTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromptTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
