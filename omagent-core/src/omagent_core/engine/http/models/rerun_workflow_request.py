import pprint
import re  # noqa: F401

import six


class RerunWorkflowRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        're_run_from_workflow_id': 'str',
        'workflow_input': 'dict(str, object)',
        're_run_from_task_id': 'str',
        'task_input': 'dict(str, object)',
        'correlation_id': 'str'
    }

    attribute_map = {
        're_run_from_workflow_id': 'reRunFromWorkflowId',
        'workflow_input': 'workflowInput',
        're_run_from_task_id': 'reRunFromTaskId',
        'task_input': 'taskInput',
        'correlation_id': 'correlationId'
    }

    def __init__(self, re_run_from_workflow_id=None, workflow_input=None, re_run_from_task_id=None, task_input=None,
                 correlation_id=None):  # noqa: E501
        """RerunWorkflowRequest - a model defined in Swagger"""  # noqa: E501
        self._re_run_from_workflow_id = None
        self._workflow_input = None
        self._re_run_from_task_id = None
        self._task_input = None
        self._correlation_id = None
        self.discriminator = None
        if re_run_from_workflow_id is not None:
            self.re_run_from_workflow_id = re_run_from_workflow_id
        if workflow_input is not None:
            self.workflow_input = workflow_input
        if re_run_from_task_id is not None:
            self.re_run_from_task_id = re_run_from_task_id
        if task_input is not None:
            self.task_input = task_input
        if correlation_id is not None:
            self.correlation_id = correlation_id

    @property
    def re_run_from_workflow_id(self):
        """Gets the re_run_from_workflow_id of this RerunWorkflowRequest.  # noqa: E501


        :return: The re_run_from_workflow_id of this RerunWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._re_run_from_workflow_id

    @re_run_from_workflow_id.setter
    def re_run_from_workflow_id(self, re_run_from_workflow_id):
        """Sets the re_run_from_workflow_id of this RerunWorkflowRequest.


        :param re_run_from_workflow_id: The re_run_from_workflow_id of this RerunWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._re_run_from_workflow_id = re_run_from_workflow_id

    @property
    def workflow_input(self):
        """Gets the workflow_input of this RerunWorkflowRequest.  # noqa: E501


        :return: The workflow_input of this RerunWorkflowRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._workflow_input

    @workflow_input.setter
    def workflow_input(self, workflow_input):
        """Sets the workflow_input of this RerunWorkflowRequest.


        :param workflow_input: The workflow_input of this RerunWorkflowRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._workflow_input = workflow_input

    @property
    def re_run_from_task_id(self):
        """Gets the re_run_from_task_id of this RerunWorkflowRequest.  # noqa: E501


        :return: The re_run_from_task_id of this RerunWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._re_run_from_task_id

    @re_run_from_task_id.setter
    def re_run_from_task_id(self, re_run_from_task_id):
        """Sets the re_run_from_task_id of this RerunWorkflowRequest.


        :param re_run_from_task_id: The re_run_from_task_id of this RerunWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._re_run_from_task_id = re_run_from_task_id

    @property
    def task_input(self):
        """Gets the task_input of this RerunWorkflowRequest.  # noqa: E501


        :return: The task_input of this RerunWorkflowRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._task_input

    @task_input.setter
    def task_input(self, task_input):
        """Sets the task_input of this RerunWorkflowRequest.


        :param task_input: The task_input of this RerunWorkflowRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._task_input = task_input

    @property
    def correlation_id(self):
        """Gets the correlation_id of this RerunWorkflowRequest.  # noqa: E501


        :return: The correlation_id of this RerunWorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this RerunWorkflowRequest.


        :param correlation_id: The correlation_id of this RerunWorkflowRequest.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RerunWorkflowRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RerunWorkflowRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
