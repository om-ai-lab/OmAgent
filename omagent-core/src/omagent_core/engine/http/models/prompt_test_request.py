import pprint
import re  # noqa: F401

import six


class PromptTemplateTestRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'llm_provider': 'str',
        'model': 'str',
        'prompt': 'str',
        'prompt_variables': 'dict(str, object)',
        'stop_words': 'list[str]',
        'temperature': 'float',
        'top_p': 'float'
    }

    attribute_map = {
        'llm_provider': 'llmProvider',
        'model': 'model',
        'prompt': 'prompt',
        'prompt_variables': 'promptVariables',
        'stop_words': 'stopWords',
        'temperature': 'temperature',
        'top_p': 'topP'
    }

    def __init__(self, llm_provider=None, model=None, prompt=None, prompt_variables=None, stop_words=None,
                 temperature=None, top_p=None):  # noqa: E501
        """PromptTemplateTestRequest - a model defined in Swagger"""  # noqa: E501
        self._llm_provider = None
        self._model = None
        self._prompt = None
        self._prompt_variables = None
        self._stop_words = None
        self._temperature = None
        self._top_p = None
        self.discriminator = None
        if llm_provider is not None:
            self.llm_provider = llm_provider
        if model is not None:
            self.model = model
        if prompt is not None:
            self.prompt = prompt
        if prompt_variables is not None:
            self.prompt_variables = prompt_variables
        if stop_words is not None:
            self.stop_words = stop_words
        if temperature is not None:
            self.temperature = temperature
        if top_p is not None:
            self.top_p = top_p

    @property
    def llm_provider(self):
        """Gets the llm_provider of this PromptTemplateTestRequest.  # noqa: E501


        :return: The llm_provider of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._llm_provider

    @llm_provider.setter
    def llm_provider(self, llm_provider):
        """Sets the llm_provider of this PromptTemplateTestRequest.


        :param llm_provider: The llm_provider of this PromptTemplateTestRequest.  # noqa: E501
        :type: str
        """

        self._llm_provider = llm_provider

    @property
    def model(self):
        """Gets the model of this PromptTemplateTestRequest.  # noqa: E501


        :return: The model of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PromptTemplateTestRequest.


        :param model: The model of this PromptTemplateTestRequest.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def prompt(self):
        """Gets the prompt of this PromptTemplateTestRequest.  # noqa: E501


        :return: The prompt of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this PromptTemplateTestRequest.


        :param prompt: The prompt of this PromptTemplateTestRequest.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def prompt_variables(self):
        """Gets the prompt_variables of this PromptTemplateTestRequest.  # noqa: E501


        :return: The prompt_variables of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._prompt_variables

    @prompt_variables.setter
    def prompt_variables(self, prompt_variables):
        """Sets the prompt_variables of this PromptTemplateTestRequest.


        :param prompt_variables: The prompt_variables of this PromptTemplateTestRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._prompt_variables = prompt_variables

    @property
    def stop_words(self):
        """Gets the stop_words of this PromptTemplateTestRequest.  # noqa: E501


        :return: The stop_words of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._stop_words

    @stop_words.setter
    def stop_words(self, stop_words):
        """Sets the stop_words of this PromptTemplateTestRequest.


        :param stop_words: The stop_words of this PromptTemplateTestRequest.  # noqa: E501
        :type: list[str]
        """

        self._stop_words = stop_words

    @property
    def temperature(self):
        """Gets the temperature of this PromptTemplateTestRequest.  # noqa: E501


        :return: The temperature of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PromptTemplateTestRequest.


        :param temperature: The temperature of this PromptTemplateTestRequest.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def top_p(self):
        """Gets the top_p of this PromptTemplateTestRequest.  # noqa: E501


        :return: The top_p of this PromptTemplateTestRequest.  # noqa: E501
        :rtype: float
        """
        return self._top_p

    @top_p.setter
    def top_p(self, top_p):
        """Sets the top_p of this PromptTemplateTestRequest.


        :param top_p: The top_p of this PromptTemplateTestRequest.  # noqa: E501
        :type: float
        """

        self._top_p = top_p

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromptTemplateTestRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromptTemplateTestRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
